[["index.html", "An optimized practice for upstream analysis of single nucleus transcriptomics in key metabolic tissues 1 Introduction", " An optimized practice for upstream analysis of single nucleus transcriptomics in key metabolic tissues Pengwei Dong 2024-10-15 1 Introduction This is a benchmarked and optimized workflow for analyzing single-nuclei RNA sequencing (snRNA-seq), tailored to the analysis of metabolically active tissues. This workflow includes key steps from preprocessing to downstream analyses. This technical note aims to serve as a standard protocol for researchers seeking to apply snRNA-seq to metabolic tissues including adipose tissue, muscle, hypothalamus and liver to uncover novel regulatory mechanisms, identify new therapeutic targets, and ultimately contribute to the development of more effective treatments for metabolic disorders. This workflow encompasses a series of procedures, including the alignment and quantification of raw FASTQ files, followed by the recommended removal of ambient RNA after generating the raw matrix. Additionally, it involves the potential identification and removal of doublets using scDblFinder, normalization of gene expression values, multiple approaches for data integration, and comprehensive benchmarking steps to ensure robust results. "],["genome-alignment-and-quantification.html", "2 Genome alignment and quantification 2.1 Installation and reference downloading 2.2 Usage 2.3 More", " 2 Genome alignment and quantification Raw single nucleus transcriptomics sequencing reads in fastq format were downloaded and processed with Cellranger (version 7.1.0, 10x Genomics) with enabled intron mode for each sample, the reads were aligned to the human GRCh38 genome-2020-A and mouse samples to mm10-2020-A genome to generate unique molecular identifiers (UMI) the expression matrices. The cellranger count pipeline aligns sequencing reads in FASTQ files to a reference transcriptome and generates gene expresstion matrices. Below is an example from two samples, one is from human adipose tissue datasets, and the other is from mouse muscle datasets. The command we use were as follows: 2.1 Installation and reference downloading We installed Cellranger (v7.1.0) in a dedicated conda environment by following the installation protocol provided by the developers, and the necessary reference files were also downloaded. For detailed instructions, please refer to the official documentation: https://www.10xgenomics.com/cn/support/software/cell-ranger/downloads. 2.2 Usage 2.2.1 Getting started First, activate the own conda enviroment of Cell Ranger: (base) $ conda activate cellranger_7 2.2.2 Cellranger count For human samples: (cellranger_7) $ cellranger count --id=demo \\ --transcriptome=~/cellranger_ref/refdata-gex-GRCh38-2020-A \\ --fastqs=../data/demo \\ --localcores=8 --localmem=64 Foe mouse samples: (cellranger_7) $ cellranger count --id=demo \\ --transcriptome=~/cellranger_ref/refdata-gex-mm10-2020-A\\ --fastqs=../data/demo \\ --localcores=8 --localmem=64 (The name demo can be replaced with a object name of choice.) 2.2.2.1 Recommended arguments The –fastqs argument should specify the path to the directory containing the FASTQ files. If you used cellranger mkfastq to demultiplex your data, you can provide the path to the fastq_path directory located in the pipeline’s outs folder.The –sample argument corresponds to the sample ID at the beginning of each FASTQ file name. While it is not necessary for this tutorial, as all FASTQ files come from the same sample, it is included here as an example. Lastly, you need to provide the path to the –transcriptome reference package. Be sure to update the file paths in the following command as needed. 2.3 More If you want to get more information, please refer to the official website: https://www.10xgenomics.com/cn/support/software/cell-ranger/latest/tutorials/cr-tutorial-ct "],["ambient-rna-removal.html", "3 Ambient RNA removal 3.1 Usage 3.2 Caveats and hints", " 3 Ambient RNA removal The cell suspension in single nucleus transcriptome sequencing often contains a low-to-moderate concentration of cell-free mRNA or other capturable features, leading to nonzero molecule counts in cell-free droplets. These ‘ambient’ molecules originate from sources such as ruptured or degraded cells, residual cytoplasmic debris (e.g., in snRNA-seq), or exogenous contaminants. This systematic background noise can introduce batch effects and result in spurious differential gene expression. To address this, we apply CellBender, a deep generative model that accurately distinguishes cell-containing droplets from cell-free ones. By learning the background noise profile, it provides end-to-end, noise-free quantification, enhancing the reliability of downstream analysis. The primary module in the current version of CellBender is remove-background. This module effectively eliminates counts attributed to ambient RNA molecules and random barcode swapping from raw UMI-based scRNA-seq gene-by-cell count matrices. It is recommended to run remove-background as a pre-processing step before any downstream analysis using tools such as Seurat, scanpy, or custom analysis pipelines. The module supports several file formats for count matrices, including: Raw .h5 files generated by the cellranger count pipeline The raw_feature_bc_matrix folder produced by cellranger count pipline 3.1 Usage In this project, we utilize CellBender (version 0.3.0) to process the raw_feature_bc_matrix, removing empty droplets and ambient RNA molecule counts from the count matrices, and estimating the true cells present. Below is an example from one sample from adipose tissue datasets. 3.1.1 Installation We installed CellBender (v0.3.0) in a dedicated conda environment by following the installation protocol provided by the developers. You can find the detailed instructions on the documentation: https://cellbender.readthedocs.io/en/v0.3.0/installation/index.html. 3.1.2 Getting started First, activate the own conda enviroment of CellBender: (base) $ conda activate cellbender-env Then, run cellbender remove-backage using the command(leave out the flag –cuda if you are not using a GPU): (cellbender-env) $ cellbender remove-background \\ --input ./raw_feature_bc_matrix.h5 \\ --output ./output/demo.h5 \\ --cuda (The output filename “demo.h5” can be replaced with a filename of choice.) The output of remove-background is a new .h5 count matrix with ambient RNA removed. This matrix can be directly used in downstream analyses with tools like Seurat or scanpy, just as if it were the original raw dataset. You can then proceed with per-cell quality control checks and filter out dead or dying cells, as appropriate for your experiment. 3.2 Caveats and hints 3.2.0.1 Main output files output_report.html: An HTML report that includes plots, commentary, and any warnings or suggestions for improving parameter settings. output.h5: A full count matrix in .h5 format with background RNA removed, retaining all the original droplet barcodes. output.pdf: A PDF file providing a graphical summary of the inference procedure. 3.2.0.2 Recommended best practices As of v0.3.0, users will typically not need to set values for –expected-cells or –total-droplets-included, as CellBender will choose reasonable values based on your dataset. If something goes wrong with these defaults, then you can try to input these arguments manually. Considerations for setting parameters(from the official documentation): –epochs: 150 is typically a good choice. Look for a reasonably-converged ELBO value in the output PDF learning curve (meaning it looks like it has reached some saturating value). Though it may be tempting to train for more epochs, it is not advisable to over-train, since this increases the likelihood of over-fitting. (We regularize to prevent over-fitting, but training for more than 300 epochs is too much.) –expected-cells: Base this on either the number of cells expected a priori from the experimental design, or if this is not known, base this number on the UMI curve as shown below, where the appropriate number would be 5000. Pick a number where you are reasonably sure that all droplets to the left on the UMI curve are real cells. –total-droplets-included: Choose a number that goes a few thousand barcodes into the “empty droplet plateau”. Include some droplets that you think are surely empty. But be aware that the larger this number, the longer the algorithm takes to run (linear). See the UMI curve below, where an appropriate choice would be 15,000. Every droplet to the right of this number on the UMI curve should be surely-empty. (This kind of UMI curve can be seen in the web_summary.html output from cellranger count.) –cuda: Include this flag. The code is meant to be run on a GPU. –learning-rate: The default value of 1e-4 is typically fine, but this value can be adjusted if problems arise during quality-control checks of the learning curve (as above). –fpr: A value of 0.01 is the default, and represents a fairly conservative setting, which is appropriate for most analyses. In order to examine a single dataset at a time and remove more noise (at the expense of some signal), choose larger values such as 0.05 or 0.1. Bear in mind that the value 1 represents removal of (nearly) every count in the dataset, signal and noise. You can generate multiple output count matrices in the same run by choosing several values: 0.0 0.01 0.05 0.1 3.2.0.3 More If you want to get more information, please refer to the documentation and GitHub: https://cellbender.readthedocs.io/en/v0.3.0/index.html https://github.com/broadinstitute/CellBender/tree/v0.3.0 "],["quality-control-and-doublet-removal.html", "4 Quality control and doublet removal", " 4 Quality control and doublet removal These individual samples from publicly available datasets were re-analyzed with Seurat (version 5.1.0) in R v4.3.1. Individual objects were created considering genes expressed in more than 3 cells, and cells with more than 200 genes expressed. Low-quality barcodes (nucleus) had less than 200 features or than 500 UMIs were excluded. Additionally, Mitochondrial content thresholds for exclusion were set at 5% (hypothalamus, adipose tissue and liver) and 10% (skeletal muscle). All samples were assessed for potential doublets using scDblFinder (version 1.16.0), and nucleus called as doublets were removed before further analyses.The command we use were as follows: "],["normalization-clustering-and-annotation.html", "5 Normalization, clustering and annotation", " 5 Normalization, clustering and annotation Gene-expression values were normalized using sctransform (v2). Principal component analysis (PCA) was carried out using the variable features for the SCT Assay Uniform Manifold Approximation and Projection (UMAP) analysis was performed to further reduce variation to two dimensions with ‘RunUMAP’ function with 25 to 40 principal components, and a resolution range from 0.6 to 2. These clusters were manually annotated based on differentially expressed genes generated from ‘FindAllMarkers’ function as well as the canonical marker genes from published literature. The command we use were as follows: "],["data-integration.html", "6 Data integration", " 6 Data integration After filtering, mitochondrial, ribosomal protein-coding and leukocyte antigen genes were removed from these 5 datasets. Batch effect were corrected by applying following integration tools: CCA and RPCA performed in the ‘IntegrateLayers’ function which is a streamlined integrative analysis from Seurat, Harmony (version 1.2.0) as well as scVI(version 1.1.2). Followed by the tutorials of each method, when applying RunHarmony, we used donor ID as integration variants and a theta of 0.6. We used all genes in scVI integration, and Seurat objects were transcribed into anndata objects using scfetch (version 0.5.0) in R with reticulate (1.37.0). The command we use were as follows: "],["benchmarking-analyses.html", "7 Benchmarking analyses", " 7 Benchmarking analyses In addition to identification of prominent marker genes in the integrated data, benchmarking included calculations of ARI coefficients, LISI scores kBET rates for integration across different donors by using benchmarking pipeline from scib-matrices (version 0.5.1) package. All the datasets were clustered well using the above method with refined resolution.The command we use were as follows: "],["reference.html", "8 Reference", " 8 Reference Massier, L., et al., An integrated single cell and spatial transcriptomic map of human white adipose tissue. Nature Communications, 2023. 14(1): p. 1438. Fleming, S.J., et al., Unsupervised removal of systematic background noise from droplet-based single-cell experiments using CellBender. Nature Methods, 2023. 20(9): p. 1323-1335. Hao, Y., et al., Dictionary learning for integrative, multimodal and scalable single-cell analysis. Nature Biotechnology, 2024. 42(2): p. 293-304. Germain P, L.A., Garcia Meixide C, Macnair W, Robinson M Doublet identification in single-cell sequencing data using scDblFinder. f1000research, 2022. Hafemeister, C. and R. Satija, Normalization and variance stabilization of single-cell RNA-seq data using regularized negative binomial regression. Genome Biology, 2019. 20(1): p. 296. Aran, D., et al., Reference-based analysis of lung single-cell sequencing reveals a transitional profibrotic macrophage. Nature Immunology, 2019. 20(2): p. 163-172. Korsunsky, I., et al., Fast, sensitive and accurate integration of single-cell data with Harmony. Nature Methods, 2019. 16(12): p. 1289-1296. Luecken, M.D., et al., Benchmarking atlas-level data integration in single-cell genomics. Nature Methods, 2022. 19(1): p. 41-50. Yabing Song, J.G., Jianbin Wang, scfetch: an R package to access and format single-cell RNA sequencing datasets from public repositories. bioRxiv, 2023. Heumos, L., et al., Best practices for single-cell analysis across modalities. Nature Reviews Genetics, 2023. 24(8): p. 550-572. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
